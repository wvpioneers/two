{"version":3,"sources":["widgets/coloringimage.js","App.js","serviceWorker.js","index.js"],"names":["CImg","fillColors","onFill","fillme","Div","width","height","xmlns","id","transform","display","onClick","fill","fill-rule","stroke","stroke-width","stroke-miterlimit","d","stroke-linecap","stroke-dashoffset","opacity","styled","div","App","useState","r","g","b","a","color","SetColor","hex","setHex","setR","setG","setB","setA","Array","setFillColors","Wrap","Inner","i","newFillColors","slice","onChange","rgb","presetColors","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.87a06a80.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport default function CImg({ fillColors, onFill, fillme }) {\r\n  return (\r\n    <Div>\r\n      <svg width=\"793.70076\" height=\"793.7067066666666\" xmlns=\"http://www.w3.org/2000/svg\" >\r\n        <title>Sun Flower Template</title>\r\n            // keep the paths - VERY IMPORTANT!\r\n            <g id=\"layer2\" transform=\"translate(114 66)\" display=\"inline\">\r\n          <g id=\"svg_27\" transform=\"matrix(0.849029 0 0 0.849029 65.2874 25.9633)\">\r\n            <path id=\"svg_28\" onClick={() => onFill(0)} fill={fillColors[0]} fill-rule=\"evenodd\" stroke=\"blue\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m335.662872,237.986206c29.202484,-24.342041 60.58606,-230.559322 9.385345,-295.979031c-73.760437,41.40971 -167.217957,217.611736 -116.882584,287.760891c50.335403,70.149139 107.90538,6.715332 107.497238,8.21814z\" />\r\n            <path id=\"svg_29\" onClick={() => onFill(1)} fill={fillColors[1]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m386.044678,310.854431c37.9216,-2.697144 183.860779,-151.734833 180.521729,-234.741455c-84.056488,-9.480042 -262.842316,78.93425 -262.968384,165.273926c-0.126099,86.339691 83.655823,68.486267 82.446655,69.467529z\" />\r\n            <path id=\"svg_30\" onClick={() => onFill(2)} fill={fillColors[2]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m389.714386,408.724213c33.877747,17.251678 235.782501,-35.140503 275.741852,-107.972504c-67.11853,-51.482727 -265.888855,-67.969208 -310.536072,5.930603c-44.647278,73.899811 36.336273,101.825043 34.79422,102.041901z\" />\r\n            <path id=\"svg_31\" onClick={() => onFill(3)} fill={fillColors[3]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m329.107666,470.122833c19.955872,32.358643 219.640503,92.662323 291.658508,51.253998c-30.533752,-78.886414 -191.705597,-196.3815 -268.282593,-156.500183c-76.577026,39.881256 -21.946136,105.863251 -23.375916,105.246185z\" />\r\n            <path id=\"svg_32\" onClick={() => onFill(4)} fill={fillColors[4]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m262.062073,475.924225c-6.152496,37.516205 105.063141,213.985992 186.588898,229.948456c28.676453,-79.580444 -15.959839,-273.974518 -99.926239,-294.079315c-83.96637,-20.104828 -85.987854,65.534363 -86.662659,64.130859z\" />\r\n            <path id=\"svg_33\" onClick={() => onFill(5)} fill={fillColors[5]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m184.72879,458.800507c-26.9543,26.810242 -40.124664,234.985687 16.618103,295.661163c69.843018,-47.721313 147.481354,-231.443237 91.185608,-296.905792c-56.295715,-65.462585 -108.07843,2.777466 -107.803711,1.244629z\" />\r\n            <path id=\"svg_34\" onClick={() => onFill(6)} fill={fillColors[6]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m112.00724,385.084015c-36.075912,11.993652 -140.613815,192.499359 -116.845932,272.100494c83.789322,-11.606873 235.148872,-141.498169 213.913979,-225.185822c-21.234863,-83.687744 -97.99691,-45.664795 -97.068047,-46.914673z\" />\r\n            <path id=\"svg_35\" onClick={() => onFill(7)} fill={fillColors[7]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m86.959099,304.477875c-37.260666,-7.547424 -217.755577,97.009186 -236.747414,177.882935c78.45546,31.62442 274.379066,-5.730591 297.601486,-88.888702c23.222473,-83.158112 -62.281731,-88.372253 -60.854073,-88.994232z\" />\r\n            <path id=\"svg_36\" onClick={() => onFill(8)} fill={fillColors[8]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m153.065643,223.719513c-23.262451,-32.12149 -224.293907,-83.6772 -289.189682,-37.585815c39.131607,79.234161 209.680809,191.333527 279.184448,146.57312c69.503647,-44.760376 8.543472,-109.546234 10.005234,-108.987305z\" />\r\n            <path id=\"svg_37\" onClick={() => onFill(9)} fill={fillColors[9]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m254.876236,181.401382c-2.983047,-39.547852 -147.19648,-188.793056 -226.621056,-183.538116c-8.185791,87.990494 78.34198,272.831589 160.993904,271.12468c82.651855,-1.706879 64.675018,-88.828537 65.627151,-87.586563z\" />\r\n            <path id=\"svg_39\" onClick={() => onFill(10)} fill={fillColors[10]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m297.780762,228.182648c20,-28.571426 -1.799683,-218.680733 -62.857147,-264.285713c-55.34317,54.395012 -95.714279,232.85714 -34.285706,282.857155c61.428589,50 97.142853,-20 97.142853,-18.571442z\" />\r\n            <path id=\"svg_40\" onClick={() => onFill(11)} fill={fillColors[11]} fill-rule=\"evenodd\" stroke=\"#fff000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m359.904236,280.578674c32.923309,-11.505737 126.28775,-178.538239 103.373322,-251.220833c-76.694275,11.81813 -213.714111,133.078697 -193.065979,209.545174c20.648102,76.466522 90.527191,40.516205 89.692657,41.675659z\" />\r\n            <path id=\"svg_41\" onClick={() => onFill(12)} fill={fillColors[12]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m386.685059,366.340057c34.139862,7.127197 200.288086,-87.801941 218.152039,-161.887756c-71.798462,-29.439301 -251.733093,3.758179 -273.490448,79.916473c-21.757385,76.158295 56.651459,81.408508 55.338409,81.971283z\" />\r\n            <path id=\"svg_42\" onClick={() => onFill(13)} fill={fillColors[13]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m347.79303,435.268402c25.447235,23.848816 216.726807,29.222717 270.527771,-24.752167c-45.999084,-62.496185 -216.934692,-127.761536 -275.138855,-74.042389c-58.204163,53.719116 6.025208,98.997101 4.611084,98.794556z\" />\r\n            <path id=\"svg_43\" onClick={() => onFill(14)} fill={fillColors[14]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m289.832733,456.525024c3.57373,34.692291 144.463379,164.179321 220.47583,158.708496c6.252594,-77.347168 -80.004333,-238.71109 -159.173523,-236.320709c-79.169128,2.390381 -60.367462,78.692444 -61.302307,77.612213z\" />\r\n            <path id=\"svg_44\" onClick={() => onFill(15)} fill={fillColors[15]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m217.252625,459.959686c-17.416229,30.215942 20.978363,217.679657 85.801453,257.751923c50.357513,-59.04071 74.915833,-240.356537 9.337463,-284.774414c-65.578369,-44.417877 -95.013611,28.445526 -95.138916,27.022491z\" />\r\n            <path id=\"svg_45\" onClick={() => onFill(16)} fill={fillColors[16]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m135.147919,412.184082c-29.0541,19.292145 -78.199806,204.228516 -38.0187,268.984314c71.387581,-30.422058 174.154198,-181.807587 135.232918,-250.790222c-38.921219,-68.982635 -97.736008,-16.864197 -97.214218,-18.194092z\" />\r\n            <path id=\"svg_46\" onClick={() => onFill(17)} fill={fillColors[17]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m93.591728,346.846466c-34.801437,2.277344 -169.452995,138.239563 -166.820915,214.403168c77.060196,9.133057 241.528839,-71.045624 242.092804,-150.248871c0.564026,-79.203217 -76.386223,-63.260406 -75.271889,-64.154297z\" />\r\n            <path id=\"svg_47\" onClick={() => onFill(18)} fill={fillColors[18]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m132.697845,259.456573c-28.317528,-22.84375 -218.686081,-20.149323 -265.05571,36.258942c53.694321,60.736755 231.634315,118.970612 282.403305,62.632751c50.769012,-56.337799 -18.776062,-99.035065 -17.347595,-98.891693z\" />\r\n            <path id=\"svg_48\" onClick={() => onFill(19)} fill={fillColors[19]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-miterlimit=\"4\" d=\"m212.655304,197.512878c-12.149918,-34.294296 -175.706383,-131.745445 -244.757141,-107.996216c13.909821,79.865845 134.9562,222.699982 207.717178,201.315826c72.760971,-21.384125 35.898392,-94.190201 37.039963,-93.319611z\" />\r\n            <path id=\"svg_49\" onClick={() => onFill(20)} fill={fillColors[20]} fill-rule=\"evenodd\" stroke=\"#000000\" stroke-width=\"8\" stroke-linecap=\"round\" stroke-miterlimit=\"4\" stroke-dashoffset=\"0\" d=\"m356.352203,353.182648a120.714287,120.714287 0 1 1 -241.428581,0a120.714287,120.714287 0 1 1 241.428581,0z\" />\r\n            <path id=\"svg_50\" opacity=\"0.810241\" fill=\"#ffffff\" fill-rule=\"evenodd\" stroke-width=\"1.3\" stroke-linecap=\"round\" stroke-miterlimit=\"4\" stroke-dashoffset=\"0\" d=\"m309.209381,355.325439a72.857147,72.857147 0 1 1 -145.714294,0a72.857147,72.857147 0 1 1 145.714294,0z\" />\r\n          </g>\r\n        </g>\r\n      </svg>\r\n    </Div>\r\n  )\r\n};\r\n\r\nconst Div = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n`;","import React, { useState } from 'react';\nimport { SketchPicker } from 'react-color';\nimport styled from 'styled-components';\nimport CImg from './widgets/coloringimage';\n\n\nfunction App() {\n\n  const [color, SetColor] = useState({\n    r: 19,\n    g: 116,\n    b: 186,\n    a: 1\n  });\n  const [hex, setHex] = useState('#1374BA');\n  const [r, setR] = useState(\"19\");\n  const [g, setG] = useState(\"116\");\n  const [b, setB] = useState(\"186\");\n  const [a, setA] = useState(\"1\");\n  const handleChange = ({ rgb, hex }) => {\n    SetColor(rgb);\n    setR(rgb.r);\n    setG(rgb.g);\n    setB(rgb.b);\n    setA(rgb.a);\n    setHex(hex);\n  }\n  const presets = [\n    'black',\n    'white',\n    'red',\n    'green',\n    'blue',\n    'purple',\n    'orange',\n    'yellow',\n    \"gray\"\n  ];\n\n  const [fillColors, setFillColors] = useState(Array(22).fill('white'))\n\n  const onFillColor = (i) => {\n    let newFillColors = fillColors.slice(0)\n    newFillColors[i] = hex\n    setFillColors(newFillColors)\n  }\n  return (\n    <Wrap>\n      <Inner>\n        <CImg fillColors={fillColors} onFill={onFillColor} fillme={hex} />\n        <Div>\n          <SketchPicker color={color} onChange={handleChange} presetColors={presets} />\n        </Div>\n      </Inner>\n    </Wrap>\n  );\n}\n\nexport default App;\n\nconst Wrap = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-color: #F9FBFD;\n  padding: 0;\n  margin: 0;\n  overflow: hidden;\n  font-family: fa5-proxima-nova,\"Helvetica Neue\",Helvetica,Arial,sans-serif;\n`;\n\nconst Inner = styled.div`\n  margin: 0 auto;\n`;\n\nconst Div = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 0;\n  transform: translateY(-50%);\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}