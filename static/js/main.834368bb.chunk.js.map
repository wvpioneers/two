{"version":3,"sources":["widgets/navitem.js","widgets/sidenav.js","App.js","serviceWorker.js","index.js"],"names":["NavItem","Top","icon","faHourglassHalf","Circle","faChartBar","faUserGraduate","faChalkboardTeacher","faList","Bottom","CustomFont","faBell","faQuestion","styled","div","FontAwesomeIcon","SideNav","Side","App","Wrap","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kwCAKe,SAASA,IAEtB,OAAQ,oCACN,kBAACC,EAAD,KACE,kBAAC,IAAD,CAAiBC,KAAMC,MADzB,MAIA,kBAACC,EAAD,KACE,kBAAC,IAAD,CAAiBF,KAAMG,OAEzB,kBAACD,EAAD,KACE,kBAAC,IAAD,CAAiBF,KAAMI,OAEzB,kBAACF,EAAD,KACE,kBAAC,IAAD,CAAiBF,KAAMK,OAEzB,kBAACH,EAAD,KACE,kBAAC,IAAD,CAAiBF,KAAMM,OAEzB,kBAACC,EAAD,KACE,kBAACC,EAAD,CAAYR,KAAMS,MAClB,kBAACD,EAAD,CAAYR,KAAMU,MAClB,kBAACF,EAAD,CAAYR,KAAMS,QAOxB,IAAMF,EAASI,IAAOC,IAAV,KASNJ,EAAaG,YAAOE,IAAPF,CAAH,KAIVZ,EAAMY,IAAOC,IAAV,KAaHV,EAASS,IAAOC,IAAV,K,8TCxDG,SAASE,IAEtB,OACE,oCACE,kBAACC,EAAD,KACE,kBAACjB,EAAD,QAMR,IAAMiB,EAAOJ,IAAOC,IAAV,K,wQCHKI,MARf,WACE,OACE,kBAACC,EAAD,KACE,kBAACH,EAAD,QAOAG,EAAON,IAAOC,IAAV,KCFUM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.834368bb.chunk.js","sourcesContent":["import { faChalkboardTeacher, faChartBar, faBell, faQuestion, faHourglassHalf, faList, faUserGraduate } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport default function NavItem() {\r\n\r\n  return (<>\r\n    <Top>\r\n      <FontAwesomeIcon icon={faHourglassHalf} />\r\n      ER\r\n    </Top>\r\n    <Circle>\r\n      <FontAwesomeIcon icon={faChartBar} />\r\n    </Circle>\r\n    <Circle>\r\n      <FontAwesomeIcon icon={faUserGraduate} />\r\n    </Circle>\r\n    <Circle>\r\n      <FontAwesomeIcon icon={faChalkboardTeacher} />\r\n    </Circle>\r\n    <Circle>\r\n      <FontAwesomeIcon icon={faList} />\r\n    </Circle>\r\n    <Bottom>\r\n      <CustomFont icon={faBell} />\r\n      <CustomFont icon={faQuestion} />\r\n      <CustomFont icon={faBell} />\r\n\r\n    </Bottom>\r\n  </>\r\n  )\r\n};\r\n\r\nconst Bottom = styled.div`\r\n  margin-top: 50px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  & svg {\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\nconst CustomFont = styled(FontAwesomeIcon)`\r\n  color: white;\r\n  font-size: 25px;\r\n`;\r\nconst Top = styled.div`\r\n  padding: 20px 0 50px 0;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  color: white;\r\n  font-weight: 600;\r\n  & svg {\r\n    color: white;\r\n    font-size: 20px;\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\nconst Circle = styled.div`\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 2px inset white;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  overflow: hidden;\r\n  color: white;\r\n  font-size: 20px;\r\n  margin-bottom: 30px;\r\n  transition: all 400ms linear;\r\n  cursor: pointer;\r\n  &:hover {\r\n    background-color: rgba(128,128,128,0.5);\r\n    border-color: blue;\r\n    \r\n  }\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport NavItem from './navitem';\r\n\r\nexport default function SideNav() {\r\n\r\n  return (\r\n    <>\r\n      <Side>\r\n        <NavItem />\r\n      </Side>\r\n    </>\r\n  )\r\n};\r\n\r\nconst Side = styled.div`\r\n  position: fixed;\r\n  height: 100vh;\r\n  top: 0;\r\n  left: 0;\r\n  width: 70px;\r\n  background-color: #1274BA;\r\n  border-top-right-radius: 20px;\r\n  border-bottom-right-radius: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport SideNav from './widgets/sidenav';\n\nfunction App() {\n  return (\n    <Wrap>\n      <SideNav />\n    </Wrap>\n  );\n}\n\nexport default App;\n\nconst Wrap = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background-color: #F9FBFD;\n  padding: 0;\n  margin: 0;\n  overflow: hidden;\n  font-family: fa5-proxima-nova,\"Helvetica Neue\",Helvetica,Arial,sans-serif;\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}